---

networks:
  revprox:
    external: true

volumes:
  cache: null

services:

  traefik:
    image: traefik
    container_name: traefik
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    networks:
      - revprox
    ports:
      - 80:80
      - 443:443
      - 443:443/udp
    environment:
      - CF_API_EMAIL=$CFEMAIL
      - CF_API_KEY=$CFAPIKEY
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/data/traefik.yml:/traefik.yml:ro
      - ./traefik/data/acme.json:/acme.json
      - ./traefik/data/config.yml:/config.yml
    labels:
      - com.centurylinklabs.watchtower.enable=true
      # global redirect to https
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      # middleware redirect
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
      # the rest of it
      - traefik.enable=true
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.rule=Host(`traefik.$DOMAIN`)
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=cloudflare
      - traefik.http.routers.traefik.tls.domains[0].main=$DOMAIN
      - traefik.http.routers.traefik.tls.domains[0].sans=*.$DOMAIN
      - traefik.http.routers.traefik.service=api@internal
    restart: $RESTART

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - TZ=$TZ
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_SCHEDULE=0 0 5 * * *
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=telegram://$BOT_TOKEN@telegram?chats=$CHAT_ID
    # command: --interval 30
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: always
    networks:
      - revprox
    labels:
      - com.centurylinklabs.watchtower.enable=true

  tilde:
    image: caddy
    container_name: tilde
    volumes:
      - ./tilde/config:/config
      - ./tilde/caddy:/etc/caddy
      - ./tilde/srv:/srv
      - ./tilde/caddy_data:/data
      - ./tilde/caddy_config:/config
    # ports:
    #   - 80:80
    #   - 443:443
    restart: $RESTART
    networks:
      - revprox
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=revprox
      - traefik.http.routers.tilde.entrypoints=https
      - traefik.http.routers.tilde.rule=Host(`home.$DOMAIN`)
      - traefik.http.routers.tilde.tls=true
      - traefik.http.routers.tilde.service=tilde
      - traefik.http.services.tilde.loadbalancer.server.port=80

  jellyfin:
    image: lscr.io/linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=22
      # - NVIDIA_VISIBLE_DEVICES=all
      # - JELLYFIN_PublishedServerUrl=jf.$DOMAIN #optional
    network_mode: host
    # ports:
    #   - 8096:8096
    #   - 8920:8920 #optional
    #   - 7359:7359/udp #optional
    #   - 1900:1900/udp #optional
    volumes:
      - ./jellyfin:/config
      - ./jellyfin/cache:/cache
      - cache:/transcode
      - $HOMEDIR:/homedir
      - $WD8TB:/shares
    devices:
      - /dev/dri:/dev/dri #optional
    restart: $RESTART
    # networks:
    #   - revprox
    labels:
      - com.centurylinklabs.watchtower.enable=true
      # - traefik.enable=true
      # - traefik.docker.network=revprox
      # - traefik.http.routers.jellyfin.entrypoints=https
      # - traefik.http.routers.jellyfin.rule=Host(`jf.$DOMAIN`)
      # - traefik.http.routers.jellyfin.tls=true
      # - traefik.http.routers.jellyfin.service=jellyfin
      # - traefik.http.services.jellyfin.loadbalancer.server.port=8096

  prowlarr:
    image: lscr.io/linuxserver/prowlarr
    container_name: prowlarr
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
    # ports:
    #   - 9696:9696
    volumes:
      - ./prowlarr:/config
      - ./downloads:/downloads
    restart: $RESTART
    networks:
      - revprox
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=revprox
      - traefik.http.routers.prowlarr.entrypoints=https
      - traefik.http.routers.prowlarr.rule=Host(`p.$DOMAIN`)
      - traefik.http.routers.prowlarr.tls=true
      - traefik.http.routers.prowlarr.service=prowlarr
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd
    container_name: sabnzbd
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
    # ports:
    #   - 8181:8080 # port mapping
    volumes:
      - ./sabnzbd/config:/config # sab config directory
      - ./downloads:/downloads # completed directory for downloads. this contains the category directories
      - ./downloads/incomplete:/incomplete-downloads # temp directory for downloads
    restart: $RESTART
    networks:
      - revprox
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=revprox
      - traefik.http.routers.sabnzbd.entrypoints=https
      - traefik.http.routers.sabnzbd.rule=Host(`sab.$DOMAIN`)
      - traefik.http.routers.sabnzbd.tls=true
      - traefik.http.routers.sabnzbd.service=sabnzbd
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - UMASK=22
    # ports:
    #   - 8989:8989 # port mapping
    volumes:
      - ./sonarr:/config # sonarr config dir
      - ./downloads:/downloads # your completed downloads directory from sab
      - $WD8TB:/shares
    restart: $RESTART
    networks:
      - revprox
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=revprox
      - traefik.http.routers.sonarr.entrypoints=https
      - traefik.http.routers.sonarr.rule=Host(`sonarr.$DOMAIN`)
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.service=sonarr
      - traefik.http.services.sonarr.loadbalancer.server.port=8989

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - UMASK=22
    # ports:
    #   - 7878:7878 # port mapping
    volumes:
      - ./radarr:/config # config directory for radarr
      - ./downloads:/downloads # completed downloads directory from sab
      - $WD8TB:/shares
    restart: $RESTART
    networks:
      - revprox
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=revprox
      - traefik.http.routers.radarr.entrypoints=https
      - traefik.http.routers.radarr.rule=Host(`radarr.$DOMAIN`)
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.service=radarr
      - traefik.http.services.radarr.loadbalancer.server.port=7878

  # lidarr:
  #   image: lscr.io/linuxserver/lidarr
  #   container_name: lidarr
  #   environment:
  #     - TZ=$TZ
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - UMASK=22
  #   volumes:
  #     - ./lidarr:/config
  #     - ./downloads:/downloads
  #     - $WD8TB:/shares
  #   # ports:
  #   #   - 8686:8686
  #   restart: $RESTART
  #   networks:
  #     - revprox
  #   labels:
  #     - com.centurylinklabs.watchtower.enable=true
  #     - traefik.enable=true
  #     - traefik.docker.network=revprox
  #     - traefik.http.routers.lidarr.entrypoints=https
  #     - traefik.http.routers.lidarr.rule=Host(`lidarr.$DOMAIN`)
  #     - traefik.http.routers.lidarr.tls=true
  #     - traefik.http.routers.lidarr.service=lidarr
  #     - traefik.http.services.lidarr.loadbalancer.server.port=8686


  bazarr:
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
    # ports:
    #   - 6767:6767
    volumes:
      - ./bazarr:/config
      - $WD8TB:/shares
    restart: $RESTART
    networks:
      - revprox
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=revprox
      - traefik.http.routers.bazarr.entrypoints=https
      - traefik.http.routers.bazarr.rule=Host(`bazarr.$DOMAIN`)
      - traefik.http.routers.bazarr.tls=true
      - traefik.http.routers.bazarr.service=bazarr
      - traefik.http.services.bazarr.loadbalancer.server.port=6767

  jellyseerr:
    image: fallenbagel/jellyseerr
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=$TZ
    volumes:
      - ./jellyseerr:/app/config
      - $HOMEDIR:/homedir
      - $WD8TB:/shares
    # ports:
    #   - 5055:5055
    restart: $RESTART
    networks:
      - revprox
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=revprox
      - traefik.http.routers.jellyseerr.entrypoints=https
      - traefik.http.routers.jellyseerr.rule=Host(`js.$DOMAIN`)
      - traefik.http.routers.jellyseerr.tls=true
      - traefik.http.routers.jellyseerr.service=jellyseerr
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055

  openspeedtest:
    image: openspeedtest/latest
    container_name: openspeedtest
    # ports:
    #   - 3000:3000
    #   - 3001:3001
    restart: $RESTART
    networks:
      - revprox
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=revprox
      - traefik.http.routers.openspeedtest.entrypoints=https
      - traefik.http.routers.openspeedtest.rule=Host(`speed.$DOMAIN`)
      - traefik.http.routers.openspeedtest.tls=true
      - traefik.http.routers.openspeedtest.service=openspeedtest
      - traefik.http.services.openspeedtest.loadbalancer.server.port=3000
