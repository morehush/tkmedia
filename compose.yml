---

networks:
  revproxy:
    external: true
  pangolin:
    external: true

volumes:
  cache: null

services:

  homepage:
    image: ghcr.io/gethomepage/homepage
    container_name: homepage
    # ports:
    #   - 3000:3000
    volumes:
      - ./homepage:/app/config
      - ${WD8TB}:/wd8tb
      - ${SSD}:/ssd
      - /var/run/docker.sock:/var/run/docker.sock:ro # (optional) For docker integrations
    environment:
      HOMEPAGE_ALLOWED_HOSTS: home.${DOMAIN}
      # PUID: ${PUID}
      # PGID: ${PGID}
    restart: unless-stopped
    networks:
      - revproxy
    labels:
      traefik.enable: true
      traefik.http.routers.homepage.entrypoints: websecure
      traefik.http.routers.homepage.rule: Host(`home.${DOMAIN}`)
      traefik.http.routers.homepage.tls: true
      traefik.http.routers.homepage.service: homepage
      traefik.http.services.homepage.loadbalancer.server.port: 3000

  # glance:
  #   container_name: glance
  #   image: glanceapp/glance
  #   environment:
  #     - GITHUB_TOKEN=${GITHUB_TOKEN}
  #   volumes:
  #     - ./glance/config:/app/config
  #     - ./glance/assets:/app/assets
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   # ports:
  #   #   - 8080:8080
  #   restart: unless-stopped
  #   networks:
  #     - revproxy
  #   labels:
  #     traefik.enable: true
  #     traefik.http.routers.glance.entrypoints: websecure
  #     traefik.http.routers.glance.rule: Host(`glance.${DOMAIN}`)
  #     traefik.http.routers.glance.tls: true
  #     traefik.http.routers.glance.service: glance
  #     traefik.http.services.glance.loadbalancer.server.port: 8080  

  jellyfin:
    image: lscr.io/linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=22
      - MALLOC_TRIM_THRESHOLD_=100000
      # - NVIDIA_VISIBLE_DEVICES=all
      # - JELLYFIN_PublishedServerUrl=jf.${DOMAIN} #optional
    ports:
      - 8096:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional
    volumes:
      - ./jellyfin:/config
      - ./jellyfin/cache:/cache
      - cache:/transcode
      - ${HOMEDIR}:/homedir
      - ${WD8TB}:/shares
      - ${SSD}:/ssd
    devices:
      - /dev/dri:/dev/dri #optional
    restart: unless-stopped
    networks:
      - revproxy
      - pangolin
    labels:
      traefik.enable: true
      traefik.docker.network: revproxy
      traefik.http.routers.jellyfin.entrypoints: websecure
      traefik.http.routers.jellyfin.rule: Host(`jf.${DOMAIN}`)
      traefik.http.routers.jellyfin.tls: true
      traefik.http.routers.jellyfin.service: jellyfin
      traefik.http.services.jellyfin.loadbalancer.server.port: 8096

  prowlarr:
    image: lscr.io/linuxserver/prowlarr
    container_name: prowlarr
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    # ports:
    #   - 9696:9696
    volumes:
      - ./prowlarr:/config
      - $HOMEDIR/downloads:/downloads
    restart: unless-stopped
    networks:
      - revproxy
    labels:
      traefik.enable: true
      traefik.docker.network: revproxy
      traefik.http.routers.prowlarr.entrypoints: websecure
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.${DOMAIN}`)
      traefik.http.routers.prowlarr.tls: true
      traefik.http.routers.prowlarr.service: prowlarr
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd
    container_name: sab
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    # ports:
    #   - 8181:8080 # port mapping
    volumes:
      - ./sabnzbd/config:/config # sab config directory
      - $HOMEDIR/downloads:/downloads # completed directory for downloads. this contains the category directories
      - $HOMEDIR/downloads/incomplete:/incomplete-downloads # temp directory for downloads
    restart: unless-stopped
    networks:
      - revproxy
    labels:
      traefik.enable: true
      traefik.docker.network: revproxy
      traefik.http.routers.sabnzbd.entrypoints: websecure
      traefik.http.routers.sabnzbd.rule: Host(`sab.${DOMAIN}`)
      traefik.http.routers.sabnzbd.tls: true
      traefik.http.routers.sabnzbd.service: sabnzbd
      traefik.http.services.sabnzbd.loadbalancer.server.port: 8080
      # traefik.http.routers.sabnzbd.middlewares: tinyauth

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=22
    # ports:
    #   - 8989:8989 # port mapping
    volumes:
      - ./sonarr:/config # sonarr config dir
      - $HOMEDIR/downloads:/downloads # your completed downloads directory from sab
      - ${WD8TB}:/shares
    restart: unless-stopped
    networks:
      - revproxy
    labels:
      traefik.enable: true
      traefik.docker.network: revproxy
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.routers.sonarr.rule: Host(`sonarr.${DOMAIN}`)
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.service: sonarr
      traefik.http.services.sonarr.loadbalancer.server.port: 8989

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=22
    # ports:
    #   - 7878:7878 # port mapping
    volumes:
      - ./radarr:/config # config directory for radarr
      - $HOMEDIR/downloads:/downloads # completed downloads directory from sab
      - ${WD8TB}:/shares
    restart: unless-stopped
    networks:
      - revproxy
    labels:
      traefik.enable: true
      traefik.docker.network: revproxy
      traefik.http.routers.radarr.entrypoints: websecure
      traefik.http.routers.radarr.rule: Host(`radarr.${DOMAIN}`)
      traefik.http.routers.radarr.tls: true
      traefik.http.routers.radarr.service: radarr
      traefik.http.services.radarr.loadbalancer.server.port: 7878

  profilarr:
    image: santiagosayshey/profilarr
    container_name: profilarr
    environment:
      - TZ=${TZ}
    # ports:
    #   - 6868:6868
    volumes:
      - ./profilarr:/config
    restart: unless-stopped
    networks:
      - revproxy
    labels:
      traefik.enable: true
      traefik.docker.network: revproxy
      traefik.http.routers.profilarr.entrypoints: websecure
      traefik.http.routers.profilarr.rule: Host(`profilarr.${DOMAIN}`)
      traefik.http.routers.profilarr.tls: true
      traefik.http.routers.profilarr.service: profilarr
      traefik.http.services.profilarr.loadbalancer.server.port: 6868

  jellyseerr:
    image: fallenbagel/jellyseerr
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
    volumes:
      - ./jellyseerr:/app/config
      - ${HOMEDIR}:/homedir
      - ${WD8TB}:/shares
    # ports:
    #   - 5055:5055
    restart: unless-stopped
    networks:
      - revproxy
    labels:
      traefik.enable: true
      traefik.docker.network: revproxy
      traefik.http.routers.jellyseerr.entrypoints: websecure
      traefik.http.routers.jellyseerr.rule: Host(`js.${DOMAIN}`)
      traefik.http.routers.jellyseerr.tls: true
      traefik.http.routers.jellyseerr.service: jellyseerr
      traefik.http.services.jellyseerr.loadbalancer.server.port: 5055

  jellystat-db:
    image: postgres:15.2
    shm_size: '1gb'
    container_name: jellystat-db
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: NXsctlBVFWb66OH8E0zggGQMpujCXJWw
    volumes:
      - ./jellystat/postgres-data:/var/lib/postgresql/data
    networks:
      - default

  jellystat:
    image: cyfershepard/jellystat:latest
    container_name: jellystat
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: NXsctlBVFWb66OH8E0zggGQMpujCXJWw
      POSTGRES_IP: jellystat-db
      POSTGRES_PORT: 5432
      JWT_SECRET: "Ts1QbuaZxiBG17sUAdr5jyAvfjI8Xttu"
      TZ: America/New_York # timezone (ex: Europe/Paris)
    volumes:
      - ./jellystat/jellystat-backup-data:/app/backend/backup-data
    # ports:
    #   - "3000:3000"
    depends_on:
      - jellystat-db
    networks:
      - default
      - revproxy
    labels:
      traefik.enable: true
      traefik.http.routers.jellystat.entrypoints: websecure
      traefik.http.routers.jellystat.rule: Host(`jellystat.${DOMAIN}`)
      traefik.http.routers.jellystat.tls: true
      traefik.http.routers.jellystat.service: jellystat
      traefik.http.services.jellystat.loadbalancer.server.port: 3000  

  calibre-web-automated:
    image: crocodilestick/calibre-web-automated
    container_name: calibre-web-automated
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ} 
    volumes:
      - ./calibre/config:/config 
      - $SSD/Sync/calibre:/cwa-book-ingest
      - ${SSD}/library:/calibre-library 
    ports:
      - 8083:8083 
    restart: unless-stopped
    networks:
      - revproxy
    labels:
      traefik.enable: true
      traefik.docker.network: revproxy
      traefik.http.routers.calibre-web-automated.entrypoints: websecure
      traefik.http.routers.calibre-web-automated.rule: Host(`calibre.${DOMAIN}`)
      traefik.http.routers.calibre-web-automated.tls: true
      traefik.http.routers.calibre-web-automated.service: calibre-web-automated
      traefik.http.services.calibre-web-automated.loadbalancer.server.port: 8083

  pinchflat:
    image: ghcr.io/kieraneglin/pinchflat:latest
    container_name: pinchflat
    user: '1000:100'
    environment:
      - TZ=${TZ}
    # ports:
    #   - 8945:8945
    volumes:
      - ./pinchflat:/config
      - ${SSD}/Videos/youtube:/downloads
    restart: unless-stopped
    networks:
      - revproxy
    labels:
      traefik.enable: true
      traefik.docker.network: revproxy
      traefik.http.routers.pinchflat.entrypoints: websecure
      traefik.http.routers.pinchflat.rule: Host(`pinchflat.${DOMAIN}`)
      traefik.http.routers.pinchflat.tls: true
      traefik.http.routers.pinchflat.service: pinchflat
      traefik.http.services.pinchflat.loadbalancer.server.port: 8945
      traefik.http.routers.pinchflat.middlewares: tinyauth

  omnitools:
    image: iib0011/omni-tools
    container_name: omnitools
    # ports:
    #   - 8080:80
    restart: unless-stopped
    networks:
      - revproxy
    labels:
      traefik.enable: true
      traefik.docker.network: revproxy
      traefik.http.routers.omnitools.entrypoints: websecure
      traefik.http.routers.omnitools.rule: Host(`omnitools.${DOMAIN}`)
      traefik.http.routers.omnitools.tls: true
      traefik.http.routers.omnitools.service: omnitools
      traefik.http.services.omnitools.loadbalancer.server.port: 80
      traefik.http.routers.omnitools.middlewares: tinyauth
